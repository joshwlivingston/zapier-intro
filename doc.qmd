---
title: "Introduction to API's"
author: "Josh Livingston"
date: today
format: 
  html:
    theme:
      dark: darkly
      light: flatly
    toc: true
    toc-location: right
    toc-depth: 4
    header-includes: |
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Karma:wght@300&family=Hind+Siliguri&display=swap" rel="stylesheet">
mainfont: Karma
---

```{=html}
<style>
  h1, h2, h3, h4 {
    font-family: Hind Siliguri;
  }
</style>
```
## Introduction

This document contains my notes and exercise work to Zapier's [An Introduction to Api's](https://zapier.com/resources/guides/apis "An Introduction to Api's - Zapier"), which is recommended as foundational reading for those who are new to API's and intending to build an [API Package](https://cran.r-project.org/web/packages/httr/vignettes/api-packages.html "Best practices for API packages") using `httr`.

## Chapter 1: Introduction

[*Link to chapter*](https://zapier.com/resources/guides/apis/introduction "Chapter 1: Introduction - An introduction to APIs | Zapier guides")

> An API is just a set of rules (interface) that the \[server and client\] agree to follow.

-   **Servers**, simply put, are computers
    -   Web servers continuously run the programs (**API**'s) loaded onto them
        -   These programs wait for a **request** to generate a web page
-   **API**'s:
    1.  Make a website's data accessible
    2.  Integrate the **server** (program) and **client** (user)
-   Key terms:
    -   **Server**: A powerful computer that runs an API
    -   **API**: The "hidden" portion of a website that is meant for computer consumption
    -   **Client**: A program that exchanges data with a server through an API

## Chapter 2: Protocols

[*Link to chapter*](https://zapier.com/resources/guides/apis/protocols "Chapter 2: Protocols - An introduction to APIs | Zapier guides")

> A computer protocol an accepted set of rules that govern how two computers can speak to each other.

-   **Protocols** can be thought of as "etiquette for computers" - rules that guide interaction
    -   Computer etiquette, in contrast to social etiquette, is extremely rigid
    -   Rigidity in this case means communication must be specifically arranged

#### HTTP

-   **HTTP** is the ubiquitous protocol for the web
-   **HTTP** involves **requests** and **responses** between the server and the client
-   The **request**-**response** cycle is comprised of five pieces:

|                 | Requests | Responses |
|-----------------|:--------:|:---------:|
| **URL**         |    ✅    |    ❌     |
| **Method**      |    ✅    |    ❌     |
| **Headers**     |    ✅    |    ✅     |
| **Body**        |    ✅    |    ✅     |
| **Status Code** |    ❌    |    ✅     |

1.  A **URL** (Uniform Resource Locator) is the "noun" of an API **request** - a unique address that points to a program's resources
2.  The **request**'s **method** (the verb) answers the question "What kind of action should be taken?":
    1.  GET (retrieve)
    2.  POST (create)
    3.  PUT (modify)
    4.  DELETE (delete)
3.  **Headers** provide meta-information about a **request** or **response** (e.g. mobile vs desktop)
4.  The **body** contains the data for the **request** or **response**
5.  The **status code** is a three digit number that communicates the **response**'s result

## Chapter 3: Data formats

[*Link to chapter*](https://zapier.com/resources/guides/apis/data-formats "Chapter 3: Data formats - An introduction to APIs | Zapier guides")

-   Data is arranged into a commonly-understood format, usually either **JSON** (JavaScript Object Notation or **XML** (Extensible Markup Language)

-   Data formats can be noted in both **requests** and **responses**

    -   In a **response**, the `Content-Type` header can be set to specify the format of the data included in the **response**
    -   In a **request**, the `Accept` header can be set to specify the data format required by the **client**

#### JSON

-   **JSON** represents data in **key**-**value** pairs

    -   **Keys** identify the attribute of the object being described
    -   **Values** contain the object's descriptions corresponding to each attribute
    -   Pairs can be nested as **associative arrays**

#### XML

-   **XML** represents data in building blocks called **nodes**
    -   Each object starts with a root **node**; subsequent **nodes** are nested inside
    -   Each item in the object is represented by its own **node**

## Chapters 4 + 5: Authentication

[*Link to Chapter 4*](https://zapier.com/resources/guides/apis/authentication-part-1 "Chapter 4: Authentication, part 1 - An introduction to APIs | Zapier guides")

[*Link to Chapter 5*](https://zapier.com/resources/guides/apis/authentication-part-2 "Chapter 5: Authentication, part 2 - An introduction to APIs | Zapier guides")

## Chapter 6: API Design

[*Link to Chapter*](https://zapier.com/resources/guides/apis/design "Chapter 6: API design - An introduction to APIs | Zapier guides")

## Chapter 7: Real-Time Communication

[*Link to Chapter*](https://zapier.com/resources/guides/apis/real-time-communication "Chapter 7: Real-Time communication - An introduction to APIs | Zapier guides")

## Chapter 8: Implementation

[*Link to Chapter*](https://zapier.com/resources/guides/apis/implementation "Chapter 8: Implementation - An introduction to APIs | Zapier guides")
